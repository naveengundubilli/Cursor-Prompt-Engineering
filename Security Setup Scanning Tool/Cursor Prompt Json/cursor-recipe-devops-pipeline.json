{
  "meta": {
    "id": "devops-pipeline",
    "name": "DevOps Pipeline",
    "version": "1.0.0",
    "created": "2025-08-22",
    "description": "CI/CD with security gates and Terraform IaC for cloud deployment.",
    "tech_stack": [
      "GitHub Actions",
      "Syft",
      "Trivy",
      "Terraform"
    ]
  },
  "global_constraints": [
    "Use only open-source libraries with permissive licenses.",
    "Prefer configuration over code; externalize credentials and secrets.",
    "Must run on Windows without Docker for local dev (provide PowerShell scripts); containerized path optional.",
    "All code must be linted, formatted, and covered by unit tests where sensible.",
    "Implement .editorconfig and pre-commit hooks (where applicable).",
    "Generate SBOM (Syft) and sign images/artifacts (Cosign) in CI (optional for local).",
    "All services expose /health and /ready endpoints. Use OpenAPI for REST.",
    "No plaintext secrets; use environment variables and .env.example only.",
    "Write README.md with setup, run, and test commands.",
    "Add telemetry hooks (OpenTelemetry) but keep them optional via env flags."
  ],
  "milestones": [
    {
      "id": "mvp-0",
      "title": "Scaffold & Baseline",
      "acceptance": [
        "Project builds locally on Windows via PowerShell script.",
        "Unit test scaffold runs and passes (empty test)."
      ]
    },
    {
      "id": "mvp-1",
      "title": "Core Feature MVP",
      "acceptance": [
        "Primary happy-path scenario works end-to-end.",
        "OpenAPI contract generated and served at /swagger or /api-docs."
      ]
    },
    {
      "id": "mvp-2",
      "title": "Hardening & CI",
      "acceptance": [
        "Linting, tests in CI; SBOM generated; basic security scans pass."
      ]
    },
    {
      "id": "mvp-3",
      "title": "Docs & Examples",
      "acceptance": [
        "README includes examples, troubleshooting, limitations."
      ]
    }
  ],
  "dependencies": [
    "backend-core",
    "sast-worker",
    "iac-worker",
    "frontend-dashboard"
  ],
  "prompts": [
    {
      "id": "github-actions-ci",
      "title": "GitHub Actions CI with Security Gates",
      "prompt": "Create .github/workflows/ci.yml to run for backend, workers, and frontend:\n- Triggers: PR and push to main\n- Jobs: lint, test, build\n- Generate SBOM with anchore/syft for each service\n- Run Trivy to scan built images or file system (frontend as fs)\n- Upload artifacts; cache deps\n- On release tags: sign artifacts with cosign (keyless allowed), attach SBOM",
      "acceptance": [
        "CI runs on PR; artifacts available; SBOM uploaded.",
        "Security scans run and results visible in logs."
      ]
    },
    {
      "id": "terraform-eks",
      "title": "Terraform for AWS EKS + RDS + MSK (Optional)",
      "prompt": "Provide Terraform modules to provision:\n- EKS cluster (managed node groups), namespace for platform\n- RDS PostgreSQL (encrypted, minimal privs), security groups\n- MSK (Kafka) optional; toggle via variable\n- S3 bucket for raw artifacts (versioned, SSE-S3/KMS)\nInclude example tfvars and PowerShell helper scripts to plan/apply from Windows.",
      "acceptance": [
        "terraform plan completes without errors; outputs include kubeconfig path and connection strings."
      ]
    }
  ],
  "files": [
    {
      "path": ".github/workflows/ci.yml",
      "contents": "# to be generated by Cursor per prompt"
    },
    {
      "path": "infra/README.md",
      "contents": "Terraform modules for AWS EKS/RDS/MSK/S3."
    }
  ],
  "commands": [
    {
      "name": "CI Lint (local)",
      "run": "powershell -ExecutionPolicy Bypass -Command \"echo 'lint placeholder'\""
    }
  ]
}