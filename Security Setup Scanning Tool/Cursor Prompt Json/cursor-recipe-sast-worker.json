{
  "meta": {
    "id": "sast-worker",
    "name": "SAST Worker",
    "version": "1.0.0",
    "created": "2025-08-22",
    "description": "Worker that runs Semgrep and OWASP Dependency-Check and publishes normalized results.",
    "tech_stack": [
      "Java 21",
      "Spring Boot",
      "Semgrep",
      "OWASP Dependency-Check"
    ]
  },
  "global_constraints": [
    "Use only open-source libraries with permissive licenses.",
    "Prefer configuration over code; externalize credentials and secrets.",
    "Must run on Windows without Docker for local dev (provide PowerShell scripts); containerized path optional.",
    "All code must be linted, formatted, and covered by unit tests where sensible.",
    "Implement .editorconfig and pre-commit hooks (where applicable).",
    "Generate SBOM (Syft) and sign images/artifacts (Cosign) in CI (optional for local).",
    "All services expose /health and /ready endpoints. Use OpenAPI for REST.",
    "No plaintext secrets; use environment variables and .env.example only.",
    "Write README.md with setup, run, and test commands.",
    "Add telemetry hooks (OpenTelemetry) but keep them optional via env flags."
  ],
  "milestones": [
    {
      "id": "mvp-0",
      "title": "Scaffold & Baseline",
      "acceptance": [
        "Project builds locally on Windows via PowerShell script.",
        "Unit test scaffold runs and passes (empty test)."
      ]
    },
    {
      "id": "mvp-1",
      "title": "Core Feature MVP",
      "acceptance": [
        "Primary happy-path scenario works end-to-end.",
        "OpenAPI contract generated and served at /swagger or /api-docs."
      ]
    },
    {
      "id": "mvp-2",
      "title": "Hardening & CI",
      "acceptance": [
        "Linting, tests in CI; SBOM generated; basic security scans pass."
      ]
    },
    {
      "id": "mvp-3",
      "title": "Docs & Examples",
      "acceptance": [
        "README includes examples, troubleshooting, limitations."
      ]
    }
  ],
  "dependencies": [
    "backend-core"
  ],
  "prompts": [
    {
      "id": "scaffold-sast",
      "title": "Scaffold SAST Worker",
      "prompt": "Create a Spring Boot worker 'secplatform-sast' with:\n- Kafka consumer: scan.requests filtered by type=SAST\n- Execute Semgrep and OWASP Dependency-Check\n- For Windows local dev: download tools on first run to .tools\\semgrep and .tools\\dependency-check\n- Run scanners on a cloned repo (use JGit or shell if available); allow local path fallback\n- Parse JSON/XML outputs into normalized Finding objects (map ruleId, severity, file, line, snippet)\n- Publish ScanResult to scan.results with metrics (duration, tool versions)\n- PowerShell scripts to run without Docker\n- Unit tests for parsers (use sample fixtures)",
      "acceptance": [
        "Given a small test repo, worker emits findings to scan.results.",
        "Parsers extract ruleId, severity, file/line."
      ]
    }
  ],
  "files": [
    {
      "path": "scripts/run-sast.ps1",
      "contents": "Write-Host 'Run SAST worker'"
    },
    {
      "path": ".env.example",
      "contents": "BROKER_DISABLED=true\nTOOLS_DIR=.tools"
    }
  ],
  "commands": [
    {
      "name": "Run (local no-broker)",
      "run": "powershell -ExecutionPolicy Bypass -File scripts\\run-sast.ps1"
    }
  ]
}