{
  "meta": {
    "id": "frontend-dashboard",
    "name": "Frontend Dashboard",
    "version": "1.0.0",
    "created": "2025-08-22",
    "description": "React SPA for risk overview, findings triage, and scan management.",
    "tech_stack": [
      "React",
      "TypeScript",
      "Vite",
      "React Query",
      "Chart.js",
      "D3"
    ]
  },
  "global_constraints": [
    "Use only open-source libraries with permissive licenses.",
    "Prefer configuration over code; externalize credentials and secrets.",
    "Must run on Windows without Docker for local dev (provide PowerShell scripts); containerized path optional.",
    "All code must be linted, formatted, and covered by unit tests where sensible.",
    "Implement .editorconfig and pre-commit hooks (where applicable).",
    "Generate SBOM (Syft) and sign images/artifacts (Cosign) in CI (optional for local).",
    "All services expose /health and /ready endpoints. Use OpenAPI for REST.",
    "No plaintext secrets; use environment variables and .env.example only.",
    "Write README.md with setup, run, and test commands.",
    "Add telemetry hooks (OpenTelemetry) but keep them optional via env flags."
  ],
  "milestones": [
    {
      "id": "mvp-0",
      "title": "Scaffold & Baseline",
      "acceptance": [
        "Project builds locally on Windows via PowerShell script.",
        "Unit test scaffold runs and passes (empty test)."
      ]
    },
    {
      "id": "mvp-1",
      "title": "Core Feature MVP",
      "acceptance": [
        "Primary happy-path scenario works end-to-end.",
        "OpenAPI contract generated and served at /swagger or /api-docs."
      ]
    },
    {
      "id": "mvp-2",
      "title": "Hardening & CI",
      "acceptance": [
        "Linting, tests in CI; SBOM generated; basic security scans pass."
      ]
    },
    {
      "id": "mvp-3",
      "title": "Docs & Examples",
      "acceptance": [
        "README includes examples, troubleshooting, limitations."
      ]
    }
  ],
  "dependencies": [
    "backend-core"
  ],
  "prompts": [
    {
      "id": "scaffold-frontend",
      "title": "Scaffold React Dashboard",
      "prompt": "Act as a senior React engineer.\nScaffold 'secplatform-dashboard' using Vite + React + TypeScript.\n- Routing: / (RiskOverview), /findings, /assets, /scans\n- Components: RiskOverview, FindingsTable, AssetGraph(D3), ScanRequestForm\n- API client using React Query; base URL from env\n- Auth: JWT stored in memory; refresh flow via interceptor\n- Charts: Chart.js for overview; D3 force graph for attack paths\n- Accessibility: keyboard nav, aria labels; responsive layout\n- Build scripts for Windows (PowerShell) and standard npm scripts",
      "acceptance": [
        "Build succeeds; pages render with mocked API data.",
        "FindingsTable supports filter by severity and status."
      ]
    }
  ],
  "files": [
    {
      "path": "scripts/run.ps1",
      "contents": "npm install; npm run dev"
    }
  ],
  "commands": [
    {
      "name": "Dev (Windows)",
      "run": "powershell -ExecutionPolicy Bypass -File scripts\\run.ps1"
    }
  ]
}